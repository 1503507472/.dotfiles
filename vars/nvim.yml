nvim_plugins:
  - name: a/vim-trash-polka
    state: present
    config: |
      colorscheme trash-polka
      let g:airline_theme='trashpolka'
  - name: sheerun/vim-polyglot
    state: present
  - name: 'junegunn/fzf'
    state: present
    do: '{ -> fzf#install() } }'
    config: noremap <leader>fp :FZF<CR>
  - name: 'ryanoasis/vim-devicons'
    state: present
    config: |
      let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''
      let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
      let g:NERDTreeDirArrowExpandable = "\u00a0"
      let g:NERDTreeDirArrowCollapsible = "\u00a0"
  - name: 'vim-airline/vim-airline'
    state: present
    config: |
      set laststatus=2
      if !exists('g:airline_symbols')
        let g:airline_symbols = {}
      endif
      let g:airline_powerline_fonts = 0
      let g:airline#extensions#tabline#enabled = 0
      let g:airline#extensions#nerdtree_status = 0
      let g:airline#extensions#tabline#fnamemod = ':t'
      "" let g:airline_section_b = g:airline#section#create(['hunks'])
      let g:airline_section_x = ''
      let g:airline_section_y = '%{LineNoIndicator()}'
      let g:airline_section_z = '%2c'
  - name: 'drzel/vim-line-no-indicator'
    state: present
  - name: 'scrooloose/nerdtree'
    state: present
    config: |
      noremap <leader>ft :NERDTreeToggle<CR>
      noremap <leader>ff :NERDTreeFind<CR>
      autocmd VimEnter *
        \   if !argc()
        \ |   NERDTree
        \ |   wincmd w
        \ | endif
      autocmd bufenter *
        \ if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
      let NERDTreeMinimalUI=1
      let NERDTreeHighlightCursorline=0
      let g:NERDTreeIgnore = ['^node_modules$']
      let g:NERDTreeWinPos = "left"
  - name: 'Xuyuanp/nerdtree-git-plugin'
    state: present
  - name: 'editorconfig/editorconfig-vim'
    state: present
    config: |
      let g:EditorConfig_exclude_patterns = ['fugitive://.\*']
  - name: 'chrisbra/Colorizer'
    state: present
  - name: 'tomtom/tcomment_vim'
    state: present
    config: |
      noremap <leader>cc :TComment<CR>
      noremap <leader>cC :TCommentInline<CR>
  - name: 'tpope/vim-fugitive'
    state: present
    config: |
      noremap <leader>ga :GBlame<CR>
      noremap <leader>gh :GBrowse<CR>
  - name: 'tpope/vim-rhubarb'
    state: present
    config: |
      set completeopt-=preview
  - name: 'airblade/vim-gitgutter'
    state: present
  - name: 'rhysd/git-messenger.vim'
    state: present
    config: |
      noremap <leader>gm :GitMessenger<CR>
  - name: 'neovim/nvim-lspconfig'
    state: present
    config: |
      lua << EOF
        require'lspconfig'.tsserver.setup{on_attach=require'completion'.on_attach}
        require'lspconfig'.vimls.setup{on_attach=require'completion'.on_attach}
        require'lspconfig'.yamlls.setup{on_attach=require'completion'.on_attach}
        require'lspconfig'.rls.setup{on_attach=require'completion'.on_attach}
        require'lspconfig'.bashls.setup{on_attach=require'completion'.on_attach}

        vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
            vim.lsp.diagnostic.on_publish_diagnostics, {
                underline = true,
                virtual_text = false
            }
        )
      EOF

      nnoremap <silent> gd    <cmd>lua vim.lsp.buf.definition()<CR>
      nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
      nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
      nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
      nnoremap <silent> gt   <cmd>lua vim.lsp.buf.type_definition()<CR>
      nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
      nnoremap <silent> gF    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
      nnoremap <silent> ge    <cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>

      set completeopt=menuone,noinsert,noselect
      set shortmess+=c
  - name: 'nvim-lua/completion-nvim'
    state: present

